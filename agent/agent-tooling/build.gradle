plugins {
  id("ai.java-conventions")
  id "com.github.johnrengelman.shadow"
  id("ai.jmh-conventions")
}

repositories {
  // maven local is needed for locally built otel fork
  mavenLocal()
}

dependencies {
  implementation project(":agent:agent-profiler:agent-service-profiler")
  implementation project(":agent:agent-profiler:agent-alerting-api")
  implementation project(":agent:agent-profiler:agent-alerting")
  implementation project(":agent:agent-gc-monitor:gc-monitor-api")
  implementation project(":agent:agent-gc-monitor:gc-monitor-core")

  // not using gson because it has dependency on java.sql.*, which is not available in Java 9+ bootstrap class loader
  // only complaint so far about moshi is that it doesn't give line numbers when there are json formatting errors
  implementation "com.squareup.moshi:moshi:${versions.moshi}"

  implementation "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryInstrumentationAlpha}"
  implementation "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryInstrumentationAlpha}"
  implementation "net.bytebuddy:byte-buddy:${versions.bytebuddy}"

  implementation "commons-codec:commons-codec:${versions.commonsCodec}"
  implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"
  implementation "commons-io:commons-io:${versions.commonsIo}"
  implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"
  implementation "org.apache.commons:commons-text:${versions.commonsText}"
  // TODO (trask) this is probably still needed for above apache commons projects
  implementation "org.slf4j:jcl-over-slf4j:${versions.slf4j}"

  implementation "org.checkerframework:checker-qual:${versions.checker}"
  implementation "com.google.code.findbugs:annotations:3.0.1"

  implementation "ch.qos.logback:logback-classic:${versions.logback}"
  implementation "ch.qos.logback.contrib:logback-json-classic:${versions.logbackJson}"

  implementation project(":agent:agent-profiler:agent-profiler-api")

  implementation "com.azure:azure-monitor-opentelemetry-exporter:1.0.0-beta.4"
  implementation "com.azure:azure-core:${versions.azureCore}"
  implementation("com.azure:azure-identity:1.2.4") {
    // "This dependency can be excluded if IntelliJ Credential is not being used for authentication
    //  via `IntelliJCredential` or `DefaultAzureCredential`"
    // NOTE this exclusion saves 6.5 mb !!!!
    exclude group: "org.linguafranca.pwdb", module: "KeePassJava2"
  }

  implementation "io.opentelemetry:opentelemetry-sdk-extension-tracing-incubator:${versions.opentelemetryAlpha}"
  implementation "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}"

  implementation "com.github.oshi:oshi-core:${versions.oshi}"
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"

  implementation "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}"
  implementation "org.jctools:jctools-core:3.3.0"

  compileOnly project(":agent:agent-bootstrap")
  compileOnly "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryInstrumentationAlpha}"
  compileOnly "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-annotation-support:${versions.opentelemetryInstrumentationAlpha}"

  testImplementation project(":agent:agent-bootstrap")
  testImplementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryInstrumentationAlpha}"
  testImplementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-annotation-support:${versions.opentelemetryInstrumentationAlpha}"

  testImplementation platform("org.junit:junit-bom:${versions.junit}")
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "org.assertj:assertj-core:${versions.assertj}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "uk.org.webcompere:system-stubs-jupiter:1.1.0"
  testImplementation "io.github.hakky54:logcaptor:${versions.logcaptor}"

  testImplementation "com.microsoft.jfr:jfr-streaming:${versions.microsoftJfrStreaming}"
  testImplementation "com.azure:azure-storage-blob:${versions.azureStorageBlob}"
}

def sdkVersionFileDir = "$project.buildDir/src/generated/main/resources"

sourceSets {
  main {
    resources {
      srcDir sdkVersionFileDir
    }
  }
}

task generateVersionProperties(type: com.microsoft.applicationinsights.build.tasks.PropsFileGen) {
  targetFile = new File(sdkVersionFileDir, "sdk-version.properties")
  property "version", project.version
}

processResources.dependsOn generateVersionProperties