import com.microsoft.applicationinsights.build.tasks.PropsFileGen

/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
    id 'com.github.johnrengelman.shadow'
}

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

archivesBaseName = 'applicationinsights-spring-boot-starter'

def starterVersionFileDir = "$project.buildDir/src/generated/main/resources"
task generateVersionProperties(type: PropsFileGen) {
    targetFile = new File(starterVersionFileDir, "starter-version.properties")
    property "version", project.version
}

processResources.dependsOn generateVersionProperties

sourceSets {
    main {
        resources {
            srcDir starterVersionFileDir
        }
    }
}

apply from: "$buildScriptsDir/provided-configuration.gradle"

def springBootVersion = '1.5.21.RELEASE'
dependencies {
    compile(project(':web')) // web includes core
    compile(project(':ApplicationInsightsInternalLogger'))
    compile ([group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'])

    provided("org.springframework.boot:spring-boot:$springBootVersion")
    provided("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion")
    provided("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    provided("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion")

    testCompile('junit:junit:4.12')
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile("org.springframework.boot:spring-boot:$springBootVersion")
    testCompile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion")
    testCompile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    testCompile("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion")
    testCompile('org.assertj:assertj-core:2.6.0')
}

ext.dependenciesPrefix = 'com.microsoft.applicationinsights.boot.dependencies'
shadowJar {
    dependencies {
        exclude(project(':web'))
        exclude(project(':ApplicationInsightsInternalLogger'))
    }
    archiveClassifier=''
    relocate 'org.apache.commons', "${dependenciesPrefix}.apachecommons"
}

jar {
    dependsOn shadowJar
    enabled = false
}

compileJava.dependsOn(processResources)
// region Publishing properties

projectPomName = project.msftAppInsightsJavaSdk + " Spring Boot starter"
projectPomDescription = "This is the Spring Boot starter of " + project.msftAppInsightsJavaSdk

whenPomConfigured = { p ->
    def agentArtifactId = project(":agent").jar.baseName
    def loggerArtifactId = project(":ApplicationInsightsInternalLogger").jar.baseName
    p.dependencies = p.dependencies.findAll { dep -> dep.scope != 'test' &&
            dep.artifactId != agentArtifactId && dep.artifactId != loggerArtifactId &&
            !(dep.groupId in ['org.apache.http', 'eu.infomas', 'org.apache.commons', 'commons-io',
                              'com.google.guava', 'com.google.code.gson', 'org.apache.httpcomponents',
                              'io.grpc', 'com.google.protobuf'])}
    p.dependencies += project.configurations.provided.allDependencies
            .findAll { it.group != 'com.microsoft.azure' }
            .collect {
                def d = p.dependencies[0].class.newInstance() // related to https://issues.gradle.org/browse/GRADLE-1497
                d.artifactId = it.name
                d.groupId = it.group
                d.version = it.version
                d.scope = 'provided'
                d.type = null
                d
            }
}
