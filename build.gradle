plugins {
  id "idea"

  id "com.github.johnrengelman.shadow" apply false

  id "org.owasp.dependencycheck" version "6.1.5"
  id "com.diffplug.spotless"
  id "net.ltgt.errorprone" apply false

  id "com.github.ben-manes.versions" version "0.38.0"
}

ext.buildScriptsDir = "$rootDir/gradle"

version = calcProjectVersion()
subprojects {
  version = rootProject.version
}

def calcProjectVersion() {
  def projectVersion = version;

  boolean isRelease = (System.properties["isRelease"] ?: "false").toBoolean()
  if (!isRelease) {
    projectVersion = projectVersion + "-SNAPSHOT"
    logger.info "This is NOT a release version; version updated to $projectVersion"
  }
  projectVersion
}

ext {
  isBuildServer = (System.properties["isBuildServer"] ?: "false").toBoolean()
  isRelease = (System.properties["isRelease"] ?: "false").toBoolean()
  if (isBuildServer) {
    logger.lifecycle "Building on SERVER"
  } else {
    logger.lifecycle "Building on DESKTOP"
  }
}

spotless {
  // this formatting is applied at the root level, as some of these files are not in a submodules
  // and would be missed otherwise
  format 'misc', {
    target '.gitignore', '*.md', 'docs/**/*.md'
    indentWithSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }
}

allprojects {
  if (!it.path.startsWith(":smoke-tests")) {
    configurations {
      runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
      }
    }
  }

  task generateLockfiles {
    doFirst {
      assert gradle.startParameter.writeDependencyLocks
      // meaning you must run with --write-locks parameter
    }
    doLast {
      if (configurations.findByName("runtimeClasspath") != null) {
        configurations.runtimeClasspath.resolve()
      }
    }
  }

  plugins.withId("net.ltgt.errorprone") {
    dependencies {
      errorprone "com.google.errorprone:error_prone_core:2.7.1"
    }

    tasks.withType(JavaCompile).configureEach {
      options.errorprone {
        enabled = rootProject.findProperty("disableErrorProne") != "true"
        disableWarningsInGeneratedCode = true
        allDisabledChecksAsWarnings = true

        excludedPaths = ".*/build/generated/.*"

        // TEMPORARILY until time to revisit
        disable("WildcardImport")
        disable("BadImport")
        disable("BooleanParameter")
        disable("JavaUtilDate")
        disable("HashCodeToString")
        disable("ImmutableEnumChecker")
        disable("JavaTimeDefaultTimeZone")

        // Doesn't work well with Java 8
        disable("FutureReturnValueIgnored")

        // Require Guava
        disable("AutoValueImmutableFields")
        disable("StringSplitter")
        disable("ImmutableMemberCollection")

        // Don't currently use this (to indicate a local variable that's mutated) but could
        // consider for future.
        disable("Var")

        // Don't support Android without desugar
        disable("AndroidJdkLibsChecker")
        disable("Java7ApiChecker")
        disable("StaticOrDefaultInterfaceMethod")

        // Common to avoid an allocation. Revisit if it's worth opt-in suppressing instead of
        // disabling entirely.
        disable("MixedMutabilityReturnType")

        // Limits API possibilities
        disable("NoFunctionalReturnType")

        // We don't use tools that recognize.
        disable("InlineMeSuggester")
        disable("DoNotCallSuggester")
      }
    }
  }
}
