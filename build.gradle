import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// region Common configurations

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
        classpath 'org.owasp:dependency-check-gradle:5.2.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
        classpath 'com.github.spotbugs:spotbugs-gradle-plugin:3.0.0'
    }
}

ext.buildScriptsDir = "$rootDir/gradle"

apply from: "$buildScriptsDir/common.gradle"

// endregion Common configurations

// region Root project script

def rootProjectBuildFolder = "$rootDir/build"
ext {
    isBuildServer = (System.properties["isBuildServer"] ?: "false").toBoolean()
    isRelease = (System.properties["isRelease"] ?: "false").toBoolean()
    if (isBuildServer) {
        logger.lifecycle "Building on SERVER"
    }
    else {
        logger.lifecycle "Building on DESKTOP"
    }
}

task clean {
    doLast {
        delete(rootProjectBuildFolder)
    }
}

allprojects {
    task generateLockfiles {
        doFirst {
            assert gradle.startParameter.writeDependencyLocks // meaning you must run with --write-locks parameter
        }
        doLast {
            configurations.findAll {
                it.canBeResolved
            }.each {
                it.resolve()
            }
        }
    }

    tasks.withType(JavaCompile) {
        doFirst {
            logger.info("sourceCompatibility = $sourceCompatibility")
            logger.info("tatgetCompatibility = $targetCompatibility")
            logger.info("options.bootstrapClasspath = $options.bootstrapClasspath")
            logger.info("options.compilerArgs = $options.compilerArgs")
        }
    }

    tasks.withType(ShadowJar) {
        exclude 'META-INF/maven/**'
        exclude 'META-INF/LICENSE*'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE*'
        from "${rootProject.projectDir}/NOTICE"
        from "${rootProject.projectDir}/LICENSE"
    }

    tasks.withType(Jar) {
        from "${rootProject.projectDir}/NOTICE"
        from "${rootProject.projectDir}/LICENSE"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// endregion Root project script

