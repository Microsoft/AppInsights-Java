import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
  id "idea"

  id "com.github.johnrengelman.shadow" version "6.1.0" apply false

  id "org.owasp.dependencycheck" version "6.1.5"
  id "com.diffplug.spotless" version "5.14.0"
  id "net.ltgt.errorprone" version "1.3.0" apply false

  id "com.github.ben-manes.versions" version "0.38.0"
}

ext.buildScriptsDir = "$rootDir/gradle"

apply from: "$buildScriptsDir/common.gradle"
apply from: "$buildScriptsDir/dependencies.gradle"

ext {
  isBuildServer = (System.properties["isBuildServer"] ?: "false").toBoolean()
  isRelease = (System.properties["isRelease"] ?: "false").toBoolean()
  if (isBuildServer) {
    logger.lifecycle "Building on SERVER"
  } else {
    logger.lifecycle "Building on DESKTOP"
  }
}

spotless {
  // this formatting is applied at the root level, as some of these files are not in a submodules
  // and would be missed otherwise
  format 'misc', {
    target '.gitignore', '*.md', 'docs/**/*.md'
    indentWithSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }
}

allprojects {
  if (!it.path.startsWith(":test")) {
    configurations {
      runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
      }
    }
  }

  task generateLockfiles {
    doFirst {
      assert gradle.startParameter.writeDependencyLocks
      // meaning you must run with --write-locks parameter
    }
    doLast {
      configurations.findAll {
        it.canBeResolved
      }.each {
        it.resolve()
      }
    }
  }

  // TODO (trask) can this be removed (from both here and pipeline that uses it?)
  tasks.register("resolveDependencies") {
    enabled !configurations.isEmpty()
    configurations.findAll { c ->
      c.allDependencies.findAll { d ->
        d instanceof ProjectDependency
      }.each { d ->
        dependsOn d.getDependencyProject().tasks.named("resolveDependencies")
      }
    }
    doLast {
      configurations.findAll {
        it.canBeResolved
      }.each {
        logger.info "Resolving $it"
        it.files
      }
    }
  }

  tasks.withType(ShadowJar) {
    exclude "META-INF/maven/**"
    exclude "META-INF/LICENSE*"
    exclude "META-INF/DEPENDENCIES"
    exclude "META-INF/NOTICE*"
    from "${rootProject.projectDir}/NOTICE"
    from "${rootProject.projectDir}/LICENSE"
  }

  tasks.withType(Jar) {
    from "${rootProject.projectDir}/NOTICE"
    from "${rootProject.projectDir}/LICENSE"
  }

  plugins.withId("net.ltgt.errorprone") {
    dependencies {
      errorprone "com.google.errorprone:error_prone_core:2.7.1"
    }

    tasks.withType(JavaCompile).configureEach {
      options.errorprone {
        enabled = rootProject.findProperty("disableErrorProne") != "true"
        disableWarningsInGeneratedCode = true
        allDisabledChecksAsWarnings = true

        excludedPaths = ".*/build/generated/.*"

        // TEMPORARILY until time to revisit
        disable("WildcardImport")
        disable("BadImport")
        disable("BooleanParameter")
        disable("JavaUtilDate")
        disable("HashCodeToString")
        disable("ImmutableEnumChecker")
        disable("JavaTimeDefaultTimeZone")

        // Doesn't work well with Java 8
        disable("FutureReturnValueIgnored")

        // Require Guava
        disable("AutoValueImmutableFields")
        disable("StringSplitter")
        disable("ImmutableMemberCollection")

        // Don't currently use this (to indicate a local variable that's mutated) but could
        // consider for future.
        disable("Var")

        // Don't support Android without desugar
        disable("AndroidJdkLibsChecker")
        disable("Java7ApiChecker")
        disable("StaticOrDefaultInterfaceMethod")

        // Common to avoid an allocation. Revisit if it's worth opt-in suppressing instead of
        // disabling entirely.
        disable("MixedMutabilityReturnType")

        // Limits API possibilities
        disable("NoFunctionalReturnType")

        // We don't use tools that recognize.
        disable("InlineMeSuggester")
        disable("DoNotCallSuggester")
      }
    }
  }
}
