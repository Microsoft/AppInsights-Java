/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply from: "$buildScriptsDir/common-java.gradle"

def sdkVersionFileDir = "$project.buildDir/src/generated/main/resources"

sourceSets {
  main {
    resources {
      srcDir sdkVersionFileDir
    }
  }
}

import com.microsoft.applicationinsights.build.tasks.PropsFileGen

archivesBaseName = "applicationinsights-core"

repositories {
  // maven local is needed for locally built otel fork
  mavenLocal()
}

configurations {
  forTheDLL { transitive = false }
}

dependencies {
  implementation project(":agent:agent-profiler:agent-profiler-api")
  implementation project(":agent:agent-profiler:agent-alerting-api")
  implementation project(":agent:agent-profiler:agent-alerting")
  implementation project(":agent:agent-gc-monitor:gc-monitor-api")
  implementation "commons-io:commons-io:${versions.commonsIo}"
  implementation "org.apache.commons:commons-lang3:${versions.commonsLang}"
  implementation "org.apache.commons:commons-text:${versions.commonsText}"
  implementation "com.squareup.moshi:moshi:${versions.moshi}"
  implementation "com.google.code.gson:gson:${versions.gson}"
  implementation "com.github.oshi:oshi-core:${versions.oshi}"
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"

  implementation "com.azure:azure-monitor-opentelemetry-exporter:1.0.0-beta.4"
  implementation("com.azure:azure-identity:1.2.4") {
    // "This dependency can be excluded if IntelliJ Credential is not being used for authentication
    //  via `IntelliJCredential` or `DefaultAzureCredential`"
    // NOTE this exclusion saves 6.5 mb !!!!
    exclude group: "org.linguafranca.pwdb", module: "KeePassJava2"
  }
  implementation "com.azure:azure-core:${versions.azureCore}"

  implementation "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}"
  implementation "org.jctools:jctools-core:3.3.0"

  implementation "org.checkerframework:checker-qual:3.14.0"

  // to use the cache from opentelemetry javaagent
  implementation "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-caching:${versions.opentelemetryInstrumentationAlpha}"

  testImplementation platform("org.junit:junit-bom:${versions.junit}")
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "org.assertj:assertj-core:${versions.assertj}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "uk.org.webcompere:system-stubs-jupiter:1.1.0"

  testImplementation "com.google.code.gson:gson:${versions.gson}"
  testImplementation "io.github.hakky54:logcaptor:${versions.logcaptor}"

  testImplementation project(":agent:agent-profiler:agent-service-profiler")
  testImplementation "com.microsoft.jfr:jfr-streaming:${versions.microsoftJfrStreaming}"
  testImplementation "com.azure:azure-storage-blob:${versions.azureStorageBlob}"

  forTheDLL "com.microsoft.azure:applicationinsights-core:2.6.2"
}

task copyTheDLL(type: Copy) {
  from zipTree(configurations.forTheDLL.singleFile).matching {
    include "*.dll"
  }
  into "$buildDir/resources/main"
}

processResources.dependsOn copyTheDLL

task generateVersionProperties(type: PropsFileGen) {
  targetFile = new File(sdkVersionFileDir, "sdk-version.properties")
  property "version", project.version
}

processResources.dependsOn generateVersionProperties
