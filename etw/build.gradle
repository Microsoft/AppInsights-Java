import org.apache.tools.ant.taskdefs.condition.Os

/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
    id 'base'
}

clean {
    dependsOn ':etw:java:clean'
    def buildNative = !(System.properties['skipWinNative'] ?: 'false').toBoolean() && Os.isFamily(Os.FAMILY_WINDOWS);
    if (buildNative) {
        dependsOn ':etw:native:clean'
    }
}

/**
 * Configures the native build variant.
 * Values:  release|debug
 * Default: debug
 */
final def NATIVE_BUILD_VARIANT_PROPERTY = 'ai.etw.native.build'

/**
 * Configures the verbosity of debug output.
 * This value is ignored if ai.etw.native.build=release
 * Values:  true|false
 * Default: false
 */
final def NATIVE_VERBOSE_OUTPUT_PROPERTY = 'ai.etw.native.verbose'

subprojects {
    ext['NATIVE_BUILD_VARIANT_PROPERTY'] = NATIVE_BUILD_VARIANT_PROPERTY
    ext['NATIVE_VERBOSE_OUTPUT_PROPERTY'] = NATIVE_VERBOSE_OUTPUT_PROPERTY

    // if prop does not exist, use isRelease value, otherwise override isRelease value.
    if (!project.hasProperty(NATIVE_BUILD_VARIANT_PROPERTY)) {
        if (System.getProperty(NATIVE_BUILD_VARIANT_PROPERTY) == null) {
            ext[NATIVE_BUILD_VARIANT_PROPERTY] = isRelease ? 'release' : 'debug'
            logger.info "setting ai.etw.native.build for ${project.name}: ${ext[NATIVE_BUILD_VARIANT_PROPERTY]}"
        } else {
            ext[NATIVE_BUILD_VARIANT_PROPERTY] = System.getProperty(NATIVE_BUILD_VARIANT_PROPERTY)
        }
    }

    if (!project.hasProperty(NATIVE_VERBOSE_OUTPUT_PROPERTY)) {
        if (System.getProperty(NATIVE_VERBOSE_OUTPUT_PROPERTY) != null) {
            ext[NATIVE_VERBOSE_OUTPUT_PROPERTY] = System.getProperty(NATIVE_VERBOSE_OUTPUT_PROPERTY)
        }
    }

    if (project.hasProperty(NATIVE_VERBOSE_OUTPUT_PROPERTY) && project.hasProperty(NATIVE_BUILD_VARIANT_PROPERTY)) {
        // verbose=true is not allowed for release builds
        if ('true'.equalsIgnoreCase(ext[NATIVE_VERBOSE_OUTPUT_PROPERTY]) && 'release'.equalsIgnoreCase(ext[NATIVE_BUILD_VARIANT_PROPERTY])) {
            logger.warn "$NATIVE_VERBOSE_OUTPUT_PROPERTY cannot be true when $NATIVE_BUILD_VARIANT_PROPERTY=relese."
            logger.warn "Setting $NATIVE_VERBOSE_OUTPUT_PROPERTY=false"
            ext[NATIVE_VERBOSE_OUTPUT_PROPERTY] = 'false'
        }
    }
}