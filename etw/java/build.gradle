/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
  id "java-library"
}

apply from: "$buildScriptsDir/common-java.gradle"

configurations {
  jni64 {
    transitive = false
  }
  jni32 {
    transitive = false
  }
}

def jniSrcDir = "src/main/jni"
sourceSets {
  main {
    java {
      srcDir jniSrcDir
    }
  }
}

archivesBaseName = "applicationinsights-java-etw-provider"

logger.info "project ${project.path} prop: ai.etw.native.build=${project.properties['ai.etw.native.build']}"

import org.apache.tools.ant.taskdefs.condition.Os

def buildNative = !(System.properties["skipWinNative"] ?: "false").toBoolean() && Os.isFamily(Os.FAMILY_WINDOWS);

dependencies {
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"

  if (buildNative) {
    jni32 project(path: ":etw:native", configuration: "${project.properties['ai.etw.native.build']}X86RuntimeElements")
    jni64 project(path: ":etw:native", configuration: "${project.properties['ai.etw.native.build']}X86-64RuntimeElements")
  } else {
    logger.quiet "Skipping build of :etw:native because skipWinNative=true. EtwAppender/EtwProvider will not work because library is missing"
  }

  testImplementation platform("org.junit:junit-bom:${versions.junit}")
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "org.assertj:assertj-core:${versions.assertj}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "org.apache.commons:commons-lang3:${versions.commonsLang}"
}

// To rebuild naitive code with new headers, first run `gradlew :etw:java:classes -Pai.etw.native.generateHeaders` to generate new header, then update the method implementations.
// After that, :etw:java can be built again.
if (hasProperty("ai.etw.native.generateHeaders")) {
  def jniOutDir = "$rootDir/etw/native/src/main/headers"
  logger.quiet "New JNI headers will be generated to $jniOutDir"
  compileJava {
    options.compilerArgs.addAll(["-h", jniOutDir])
  }
}

if (buildNative) {
  tasks.register("processNativeResources", Copy) {
    def useReleaseBuild = project.getProperty("ai.etw.native.build").equalsIgnoreCase("release")
    dependsOn project(":etw:native").tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86").get()
    dependsOn project(":etw:native").tasks.named("assemble${useReleaseBuild ? 'Release' : 'Debug'}X86-64").get()

    from configurations.jni32.files
    from configurations.jni64.files
    include "*.dll"
    into "${sourceSets.main.output.resourcesDir}"
  }
  tasks.named("processResources").configure {
    dependsOn "processNativeResources"
  }
}

tasks.named("test").configure {
  def testprops =
    project.properties.findAll {
      it.key.startsWith("ai.tests.")
    } +
      project.properties.findAll {
        it.key.startsWith("ai.etw.")
      } + ["skipWinNative": !buildNative]
  systemProperties testprops
}
