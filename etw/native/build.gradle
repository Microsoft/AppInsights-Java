/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
    id 'visual-studio'
}

// TODO honor skipWinNative property

def javaIncludeDir = new File(System.env.'JAVA_HOME', "include")
def programFilesX86 = System.env.'ProgramFiles(x86)' ?: 'C:/Program Files (x86)'

// TraceLoggingProvider.h in Windows 10 SDK
def winSdkDir = "$programFilesX86/Windows Kits/10"
if (System.env.APPINSIGHTS_WIN10_SDK_PATH) {
    winSdkDir = System.env.APPINSIGHTS_WIN10_SDK_PATH
    logger.info "Windows SDK path set with environment variable, APPINSIGHTS_WIN10_SDK_PATH"
}
def vsToolsDir = "$programFilesX86/Microsoft Visual Studio 14.0"
if (System.env.APPINSIGHTS_VS_PATH) {
    vsToolsDir = System.env.APPINSIGHTS_VS_PATH
    logger.info "Visual Studio Build Tools path set with environment variable, APPINSIGHTS_VS_PATH"
}

logger.info "Windows SDK:  $winSdkDir"
logger.info "Visual Studio Build Tools: $vsToolsDir"

toolChains.withType(VisualCpp).configureEach  {
    it.installDir vsToolsDir
    it.windowsSdkDir winSdkDir
}

ext {
    headersDir = "$projectDir/src/main/headers"
}
library {
    baseName = "applicationinsights-java-etw-provider"
    linkage = [ Linkage.SHARED ]
    targetMachines = [ machines.windows.x86, machines.windows.x86_64 ]
    privateHeaders.from file(headersDir)
}


logger.info "$NATIVE_BUILD_VARIANT_PROPERTY = ${project.properties[NATIVE_BUILD_VARIANT_PROPERTY]}"
logger.info "$NATIVE_VERBOSE_OUTPUT_PROPERTY = ${project.properties[NATIVE_VERBOSE_OUTPUT_PROPERTY]}"

// NOTE: these options apply to Visual Studio Build Tools (cl.exe)
tasks.withType(CppCompile).configureEach {
    includes file("${System.env.JAVA_HOME}/include")
    includes file("${System.env.JAVA_HOME}/include/win32")

    compilerArgs.add '/W4'
    compilerArgs.add '/EHsc'
    compilerArgs.add '/sdl'
    compilerArgs.add '/std:c++14'

    if (project.hasProperty(NATIVE_BUILD_VARIANT_PROPERTY) && 'release'.equalsIgnoreCase(project.properties[NATIVE_BUILD_VARIANT_PROPERTY])) {
        logger.info "Configuring ${it} for release build"
        macros.put("NDEBUG", null)
        compilerArgs.add '/O2' // optimize for speed
        compilerArgs.add '/MD' // multithreaded
    } else {
        logger.info "Configuring ${it} for debug build"
        compilerArgs.add '/MDd' // multithreaded, debug mode
        if (project.hasProperty(NATIVE_VERBOSE_OUTPUT_PROPERTY) && 'true'.equalsIgnoreCase(project.properties[NATIVE_VERBOSE_OUTPUT_PROPERTY])) {
            logger.info "Verbose output enabled"
            macros.put("AIETW_VERBOSE", null)
        }
    }
}

// NOTE: these options apply to Visual Studio Build Tools (link.exe)
tasks.withType(LinkSharedLibrary).configureEach {

}

import org.apache.tools.ant.taskdefs.condition.Os
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    project.afterEvaluate {
        ['Release', 'Debug'].each { v ->
            def ppBothArchTask = tasks.register("preprocess$v") {
                description = "Runs preprocessor for $v variant, all architectures"
            }
            ['X86', 'X86-64'].each { a ->
                def dllFilename = "${project.library.baseName.get()}-${a.toLowerCase()}.dll"
                tasks.named("link$v$a").configure {
                    linkedFile = file("${linkedFile.asFile.get().parent}/$dllFilename")
                }
                def ppArchTask = tasks.register("preprocess$v$a", CppCompile) {
                    description = "Runs preprocessor for $v variant, for $a architecture"
                    compilerArgs.add '/P'
                }
                ppBothArchTask.configure {
                    dependsOn ppArchTask
                }
                tasks.named("compile$v${a}Cpp").configure {
                    macros.put("DLL_FILENAME", dllFilename.toString())
                }
            }
        }
    }
}
