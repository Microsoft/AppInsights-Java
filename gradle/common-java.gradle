/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// region Shared java configuration

import org.gradle.api.tasks.testing.logging.TestLogEvent;
import org.gradle.api.tasks.testing.logging.TestExceptionFormat;

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.spotbugs'

configurations {
    def includeProfiler = project.hasProperty("includeProfiler") ? project.includeProfiler.toBoolean() : false
    if (!includeProfiler) {
        compileClasspath.resolutionStrategy.activateDependencyLocking()
        runtimeClasspath.resolutionStrategy.activateDependencyLocking()
    }
}

checkstyle {
    toolVersion = '8.22'
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties["rootDir"] = rootProject.projectDir
    showViolations = false
}

spotbugs {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'medium'

    def spotbugsExcludeFile = file("$projectDir/spotbugs.exclude.xml")
    if (spotbugsExcludeFile.exists()) {
        excludeFilter = spotbugsExcludeFile
    }
}
spotbugsTest.enabled = false

spotbugsTest.enabled = false

spotbugsMain {
    reports {
        html.enabled = true
        xml.enabled = true
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

dependencies {
    // See https://find-sec-bugs.github.io/bugs.htm for bug pattern definitions
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.9.0'
}

tasks.withType(JavaCompile) {
    options.release.set(8)
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled !isBuildServer
    }
}

dependencyCheck {
    def supFile = "${project.projectDir}/dependency-check-suppressions.xml"
    if (file(supFile).exists() && !Project.hasProperty('dependencyCheck.suppressions.skip')) {
        suppressionFiles += supFile
    }
    outputDirectory = "${project.buildDir}/reports/dependency-check"
    formats = ['HTML', 'JUNIT']
    skipConfigurations = ['mavenDeployer', 'findbugs', 'checkstyle']
    cveValidForHours = 1
    failBuildOnCVSS = 0
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    group 'Verification'
    description 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

repositories {
    mavenCentral()
}

task collectTestResults {
    doLast {
        copy {
            from testResultsDir
            into new File(rootProjectBuildDir, "$remoteTestResultsDirName/$project.name")
        }
        copy {
            from testReportDir
            into new File(rootProjectBuildDir, "$remoteTestReportDirName/$project.name")
        }
    }
}

task testAndCollect {
    dependsOn test
    finalizedBy collectTestResults
}

task vscodeClasspathFile {
    description 'Generates classpath file for the Visual Studio Code java plugin'
    ext.destFile = file("$buildDir/classpath.txt")
    outputs.file destFile
    doLast {
        def classpathString = configurations.compile.collect{ it.absolutePath }.join(File.pathSeparator)
        if (!destFile.parentFile.exists()) {
            destFile.parentFile.mkdirs()
        }
        assert destFile.parentFile.exists()
        destFile.text = classpathString
    }
}

task vscodeJavaconfigFile(dependsOn: vscodeClasspathFile) {
    description 'Generates javaconfig.json file for the Visual Studio Code java plugin'

    def relativePath = { File f ->
        f.absolutePath - "${project.rootDir.absolutePath}/"
    }
    ext.destFile = file("javaconfig.json")
    ext.config = [
        sourcePath: sourceSets.collect{ it.java.srcDirs }.flatten().collect{ relativePath(it) },
        classPathFile: relativePath(tasks.getByPath('vscodeClasspathFile').outputs.files.singleFile),
        outputDirectory: relativePath(new File(buildDir, 'vscode-classes'))
    ]
    doLast {
        def jsonContent = groovy.json.JsonOutput.toJson(ext.config)
        destFile.text = groovy.json.JsonOutput.prettyPrint(jsonContent)
    }
}

task vscode(dependsOn: vscodeJavaconfigFile) {
    description 'Generates config files for the Visual Studio Code java plugin'
    group 'vscode'
}

tasks.withType(Test) {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // only print when the top-level test suite completes
                logger.lifecycle("${desc.name} complete. Ran ${result.testCount} tests. ${result.failedTestCount} failed, ${result.skippedTestCount} skipped.")
            }
        }

        info {
            events  TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR

            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true
        }

        debug {
            events = info.events
            events << TestLogEvent.STARTED
            events << TestLogEvent.STANDARD_OUT

            exceptionFormat = info.exceptionFormat
            showExceptions = info.showExceptions
            showCauses = info.showCauses
            showStackTraces = info.showStackTraces
        }
    }
}


// endregion Shared java configuration
