/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// region Root project properties (affective for all sub-projects)

ext {
    msftAppInsights = "Microsoft Application Insights"
    msftAppInsightsJavaSdk = "$msftAppInsights Java SDK"

    rootProjectBuildDir = new File(rootDir, 'build')
    artifactsDirectoryRoot = new File(rootProjectBuildDir, 'artifacts')
    remoteTestResultsDirName = 'remote-tests-results'
    remoteTestReportDirName = 'remote-tests-reports'
}

// endregion Root project properties

// region Common configurations

version = calcProjectVersion()
subprojects {
    version = rootProject.version
}

gradle.taskGraph.whenReady { graph ->
    graph.getAllTasks().each { task ->
        if (task.hasProperty("requriedProperties")) {
            task.property("requriedProperties").each { prop ->
                verifyProjectPropertyExists(prop, task.name)
            }
        }
    }
}

// endregion Common configurations

// region Public methods

ext {
    requiredPropertiesExist = this.&requiredPropertiesExist
}

def requiredPropertiesExist(requiredPropertiesNames)
{
    return !(requiredPropertiesNames.any { prop ->
        !this.hasProperty(prop)
    })
}

// endregion Public methods

// region Private methods

def verifyProjectPropertyExists(propertyName, taskName)
{
    if (!this.hasProperty(propertyName)) {
        throw new GroovyRuntimeException("Property '$propertyName' must be defined for task '$taskName'")
    }
}

// calculate sdk version based on system properties

def calcProjectVersion() {
    def projectVersion = version;
    def userProvidedVersion = System.properties["version"]
    if (userProvidedVersion != null && userProvidedVersion.trim() != "") {
        projectVersion = userProvidedVersion.trim()
        logger.info "User provided a version; version updated to $projectVersion"
    }

    boolean isRelease = (System.properties["isRelease"] ?: "false").toBoolean()
    if (!isRelease) {
        projectVersion = projectVersion + "-SNAPSHOT"
        logger.info "This is NOT a release version; version updated to $projectVersion"
    }
    projectVersion
}

// endregion Private methods
