/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'maven'
apply from: "$buildScriptsDir/provided-configuration.gradle"

ext {
    projectPomName = ""
    projectPomDescription = ""
    whenPomConfigured = { p -> }
}

def releaseNotesFileDir = "$project.buildDir/src/common/main/resources"
task copyReleaseNotesToCommonResourcesDir(type: Copy) {
    from(rootDir) {
        include "release_notes.txt"
    }
    into releaseNotesFileDir
}

processResources.dependsOn copyReleaseNotesToCommonResourcesDir

sourceSets {
    main {
        resources {
            srcDir releaseNotesFileDir
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    mavenDeployer
}

dependencies {
    mavenDeployer "org.apache.maven.wagon:wagon-ftp:2.8"
}

uploadArchives { task ->
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(task)) {
            // check properties defined and fail early
            mavenRepositoryUrl
            mavenUsername
            mavenUserPassword
        }
    }

    doFirst {
        repositories {
            mavenDeployer {
                configuration = configurations.mavenDeployer

                repository(url: mavenRepositoryUrl) {
                    authentication(userName: mavenUsername, password: mavenUserPassword)
                }

                updatePomWithGeneralProjectInformation(pom)
            }
        }
    }
}

install {
    doFirst {
        updatePomWithGeneralProjectInformation(repositories.mavenInstaller.pom)
    }
}

// customizes pom, used for both uploadArchives.repositories.mavenDeployer.pom and install.repositories.mavenInstaller.pom
def updatePomWithGeneralProjectInformation(pomObject) {
    configure(pomObject) {
        assert (!projectPomName.isEmpty() && !projectPomDescription.isEmpty())
        project {
            name = projectPomName
            description = projectPomDescription
            url = "https://github.com/Microsoft/ApplicationInsights-Java"

            licenses {
                license {
                    name = "MIT License"
                    url = "http://www.opensource.org/licenses/mit-license.php"
                }
            }

            scm {
                url = "scm:git:https://github.com/Microsoft/ApplicationInsights-Java"
                connection = "scm:git:git://github.com/Microsoft/ApplicationInsights-Java.git"
            }

            developers {
                developer {
                    id = "microsoft"
                    name = "Microsoft"
                }
            }
        }

        scopeMappings.addMapping(MavenPlugin.PROVIDED_COMPILE_PRIORITY, configurations.getByName("provided"), Conf2ScopeMappingContainer.PROVIDED)

        withXml {
            // Append license text to pom.xml
            def pomText = asString()
            pomText.append("<!--\n")
            pomText.append(rootProject.file("LICENSE.txt").text)
            pomText.append("\n-->\n")
        }

        whenConfigured whenPomConfigured
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile + configurations.provided
}

task prepareSourcesArchive(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    doFirst {
        archiveName = "$archivesBaseName-$version-sources.jar"
    }
}

task prepareJavadocArchive(type: Jar){
    classifier = 'javadoc'
    from "$docsDir/javadoc"
    doFirst {
        archiveName = "$archivesBaseName-$version-javadoc.jar"
    }
    dependsOn javadoc
}

task copyLibsToGlobalArtifactsFolder(type: Copy) {
    from libsDir
    into new File(artifactsDirectoryRoot, project.name)
    exclude '**/windows/**'
    dependsOn assemble, prepareSourcesArchive, prepareJavadocArchive
}

task prepare {
    dependsOn copyLibsToGlobalArtifactsFolder
}

// endregion Publishing configuration
