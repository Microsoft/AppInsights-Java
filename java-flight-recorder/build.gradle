import org.gradle.internal.os.OperatingSystem;

apply from: "$buildScriptsDir/common-java.gradle"

def minJdkVersion = '1.8.0_275'

// Task to verify the minimum level of Java needed to build with JFR
task verifyJava() {
  doLast {
    def status = compareJdkVersion(jdkVersion, minJdkVersion);
    assert status >= 0 : "java version mismatch: JDK version ${jdkVersion} < minimum version ${minJdkVersion}"
  }
}

java {
  compileJava.dependsOn verifyJava
}

dependencies {
  // https://mvnrepository.com/artifact/org.testng/testng
  testImplementation  group: 'org.testng', name: 'testng', version: '7.3.0'
}

test {
  useTestNG()
}

def javaHome = hasProperty("JDKToUse") ? JDKToUse : System.getenv("JAVA_HOME")
if (javaHome == null || javaHome.equals("")) javaHome = System.getProperty("java.home")
def javaBin = new File(javaHome, 'bin')
def javaExecutable = new File(javaBin, OperatingSystem.current().isWindows() ? 'java.exe' : 'java')
assert javaExecutable.exists(): "There is no ${javaExecutable} executable in ${javaBin}"

// Determine the verion of Java in JDK_HOME. It looks like this:
//
// $ java -fullversion
// openjdk full version "1.8.0_275-b01"
//
def inStream = new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.ProcessBuilder(javaExecutable.toString(), "-fullversion").start().getErrorStream()));
try {
  String v = inStream.readLine().trim();
  if (v != null) {
    int idx = v.indexOf("full version \"");
    if (idx != -1) {
      String str = v.substring(idx);
      String vnum = str.substring(str.indexOf("\"") + 1, str.size() - 1);
      // before JEP 223, vnum looks like 1.8.0_275-b01
      // after JEP 223, vnum looks like 14.0.2+12
      ext.jdkVersion = vnum.split("[-\\+]")[0]
    }
  }
} finally {
  inStream.close();
}
assert jdkVersion != null: "Could not determine version from '${javaExecutable} -fullversion'"


/**
 * Parses pre or post JEP 223 version numbers, e.g.
 *     major.minor.subminor_update
 * or
 *     major.minor.security
 * and returns a list of 4 integers,
 * with element 3 set to 0 in the JEP 223 case.
 */
List parseJdkVersion(String version) {
  def arr = version.split("[_\\.]");
  def intArr = [];
  arr.each { s -> intArr += Integer.parseInt(s); }
  while (intArr.size() < 4) intArr += 0;
  return intArr;
}

/**
 * Returns -1, 0, or 1 depending on whether the actual JDK version
 * is less than, equal to, or grater than the expected version.
 */
int compareJdkVersion(String actual, String expected) {
  def actualIntArr = parseJdkVersion(actual);
  def expectedIntArr = parseJdkVersion(expected);

  for (int i = 0; i < 4; i++) {
    if (actualIntArr[i] < expectedIntArr[i]) return -1;
    if (actualIntArr[i] > expectedIntArr[i]) return  1;
  }
  return 0;
}

