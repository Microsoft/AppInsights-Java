/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"
apply plugin: 'findbugs'

def buildSrcDir = new File(project.buildDir, "src")
def commonSrcDir = new File(project.parent.projectDir, "common/src")
def appenderSourceDirName = "appenderSrc"

task prepareSources(type: Copy) {
    from appenderSourceDirName
    from commonSrcDir
    into buildSrcDir
}

compileJava.dependsOn prepareSources
processResources.dependsOn prepareSources

// Update source sets
sourceSets {
    main {
        java {
            srcDir "$buildSrcDir/main/java"
        }
        resources {
            srcDir "$buildSrcDir/main/resources"
        }
    }
    test {
        java {
            srcDir "$buildSrcDir/test/java"
        }
        resources {
            srcDir "$buildSrcDir/test/resources"
        }
    }
}

findbugs.sourceSets = [sourceSets.main]

// region Publishing properties

whenPomConfigured = { p ->
    p.dependencies = p.dependencies.findAll { dep -> dep.artifactId != "junit" && dep.artifactId != "mockito-all" }
    writePomToArtifactsDirectory(p, project.name)
}

// endregion Publishing properties

dependencies {
    compile project(':core')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

