import org.apache.tools.ant.filters.ReplaceTokens;

apply plugin: 'base'

ext {
    partialDockerfileExt = '.partial.dockerfile'
    jreMasterList = file('jre.master.txt')
    globalResourcesDir = "$projectDir/global-resources"
    agentLibsDir = file("${project(':agent').buildDir}/libs") // is there a better way to get this?
    agentJarName = project(':agent').jar.archiveFileName.get()
}

subprojects {
    apply plugin: 'base'

    ext {
        appServerShortName = null // set in subproject build.gradle
        outputRoot = "$projectDir/build"
        dockerfileOutputDir = "$outputRoot/dockerfiles"
        resourcesOutputDir = "$outputRoot/resources"
        stagingDir = "$outputRoot/tmp"
        additionalReplaceTokenMap = [:]
    }

    task generateDockerfiles {
        group 'Smoke Test'
        description = 'Generates Dockerfiles for building images'

        if (!jreMasterList.exists()) {
            throw new GradleException("Missing master jre list: jre.master.txt")
        }
        def jreWhitelist = file('jre.includes.txt')
        def jreBlacklist = file('jre.excludes.txt')

        def jresToUse = getConfigSet(jreMasterList, jreWhitelist, jreBlacklist)

        FileTree inputDockerfiles = fileTree(dir: projectDir, include: "*$partialDockerfileExt")

        inputs.files(inputDockerfiles)
        outputs.dir(outputRoot)
        outputs.files fileTree(dir: outputRoot)
        outputs.upToDateWhen { false }

        doFirst {
            if (!jreMasterList.exists()) {
                throw new GradleException("Missing master jre list: jre.master.txt")
            }
            if (inputDockerfiles.files.size() > 1) {
                throw new GradleException("Expected only 1 *$partialDockerfileExt file in $projectDir.name")
            }
            logger.lifecycle "JREs to use for $project.name containers: $jresToUse"
        }

        doLast {
            def jresFile = file("$resourcesOutputDir/${appServerShortName}.jre.txt")
            jresFile.getParentFile().mkdirs()
            jresFile.delete()
            jresFile.createNewFile()
            def tokenMap = [:] << additionalReplaceTokenMap
            jresToUse.each { jreVersion ->
                tokenMap << [JRE: jreVersion]
                tokenMap << [AGENT_JAR_NAME: agentJarName]
                logger.debug "tokenMap = ${tokenMap}"
                copy {
                    from "$projectDir"
                    into dockerfileOutputDir
                    include "*$partialDockerfileExt"
                    filter(ReplaceTokens, tokens: tokenMap)
                    def sanitizedJreVersion = jreVersion.replace(':','_').replace('/','_')
                    rename(/(.+\.)(partial)(\.dockerfile)/, "\$1$sanitizedJreVersion\$3")
                }
                jresFile << "$jreVersion\n"
            }
        }
    }

    task buildDockerImage {
        group 'Smoke Test'
        description 'Builds Docker images'

        dependsOn ':agent:assemble'
        dependsOn generateDockerfiles
        inputs.files(fileTree(dir: dockerfileOutputDir, include: '*.dockerfile'))

        outputs.upToDateWhen { false } // let docker determine if something needs to be built

        doLast {
            copy {
                from "$projectDir/resources/linux"
                into stagingDir
            }
            copy {
                from dockerfileOutputDir
                into stagingDir
            }
            copy {
                from globalResourcesDir
                into stagingDir
            }
            copy {
                from (agentLibsDir) {
                    exclude '**/*-intermediate.jar' // intermediate shadow jar
                }
                into "$stagingDir/aiagent"
            }

            fileTree(dir:stagingDir, include: '*.dockerfile').each { df ->
                def tag = df.name.minus('.dockerfile').replace('.', '_')
                exec {
                    workingDir df.getParentFile().absolutePath
                    executable 'docker'
                    args 'build', '--pull', '-f', df.name, '-t', tag, '.'
                }
            }
        }
    }

    clean {
        delete outputRoot
    }
}

task buildDockerImage {
    dependsOn project.subprojects.collect { it.getTasksByName('buildDockerImage', false) }

    outputs.upToDateWhen { false }

    doLast {
        project.subprojects.each { sp ->
            copy {
                from sp.ext.resourcesOutputDir
                into sharedResourcesDir
                include '**/*.*'
            }
        }
    }
}

task resetDockerEnv {
    group 'Smoke Test'
    description 'Stops all containers, prunes containers, prunes networks, prunes images'
    doLast {
        def os = new ByteArrayOutputStream()
        exec {
            executable 'docker'
            args 'ps', '-q'
            standardOutput = os
        }
        def dockerPs = os.toString().split('\\s+')
        if (dockerPs.length > 0) {
            exec {
                executable 'docker'
                ['stop', *dockerPs].each {
                    args it
                }
            }
        }
        logger.info "Pruning containers..."
        exec {
            executable 'docker'
            args 'container', 'prune', '-f'
        }
        logger.info "Pruning networks..."
        exec {
            executable 'docker'
            args 'network', 'prune', '-f'
        }
        logger.info "Pruning images..."
        exec {
            executable 'docker'
            args 'image', 'prune', '-f'
        }
    }
}

def getConfigSet(File universeFile, File includesFile, File excludesFile) {
    if (!universeFile.exists()) {
        return [].toSet()
    }
    def hasIncludes = includesFile.exists()
    def hasExcludes = excludesFile.exists()
    if (hasIncludes) {
        logger.info "includes exist: $includesFile.absolutePath"
    }
    if (hasExcludes) {
        logger.info "excludes exist: $excludesFile.absolutePath"
    }
    def universalSet = universeFile.text.readLines().toSet()
    universalSet.removeAll { it.trim().isEmpty() }
    logger.info "universalSet has ${universalSet.size()} elements: $universalSet"

    def includeSet = (hasIncludes ? includesFile.text.readLines().toSet() : universalSet)
    includeSet.removeAll { it.trim().isEmpty() }
    logger.info "includeSet has ${includeSet.size()} elements: $includeSet"

    def excludeSet = (hasExcludes ? excludesFile.text.readLines() : []).toSet()
    excludeSet.removeAll { it.trim().isEmpty() }
    logger.info "excludeSet has ${excludeSet.size()} elements: $excludeSet"

    // if the excludes file contains entries which do not exist in the master list, warn the user; this is likely a typo
    def uniqueExcludes = excludeSet.minus(universalSet)
    if (uniqueExcludes.size() > 0) {
        logger.info("$excludesFile.name entries are not a subset of ${universeFile.name}: ${uniqueExcludes}. These entries are nops and can be removed.")
    }

    // if the includes file contains entires which do not exist in the master list, warn the user; be aware that these will be included
    def uniqueIncludes = includeSet.minus(universalSet)
    if (uniqueIncludes.size() > 1) {
        logger.info("FYI: $includesFile.name has ${includeSubset.size()} entries not found in $universeFile.name: $includeSubset")
    }

    def resultantSet = includeSet.intersect(universalSet.minus(excludeSet)).plus(uniqueIncludes)
    return resultantSet
}
