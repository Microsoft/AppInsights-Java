import org.apache.tools.ant.filters.ReplaceTokens;
import static org.apache.tools.ant.taskdefs.condition.Os.*;

apply plugin: 'base'

ext {
	partialDockerfileExt = '.partial.dockerfile'
	jreMasterList = file('jre.master.txt')
	dockerExe = findDockerExe()
	dockerCliExe = findDockerCliExe()
	globalResourcesDir = "$projectDir/global-resources"
	agentLibsDir = file("${project(':agent').buildDir}/libs") // is there a better way to get this?
	agentJarName = project(':agent').jar.archiveName
}

subprojects {
	apply plugin: 'base'

	ext {
		appServerShortName = null // set in subproject build.gradle
		outputRoot = "$projectDir/build"
		dockerfileOutputDir = "$outputRoot/dockerfiles"
		resourcesOutputDir = "$outputRoot/resources"
		stagingDir = "$outputRoot/tmp"
		additionalReplaceTokenMap = [:]
	}

	task generateDockerfiles {
		description 'Generates Dockerfiles for building images'

		if (!jreMasterList.exists()) {
			throw new GradleException("Missing master jre list: jre.master.txt")
		}
		def jreWhitelist = file('jre.includes.txt')
		def jreBlacklist = file('jre.excludes.txt')

		def jresToUse = getConfigSet(jreMasterList, jreWhitelist, jreBlacklist)
		
		FileTree inputDockerfiles = fileTree(dir: projectDir, include: "*$partialDockerfileExt")

		inputs.files(inputDockerfiles)
		outputs.dir(outputRoot)
		outputs.files fileTree(dir: outputRoot)
		outputs.upToDateWhen { false }

		doFirst {
			if (!jreMasterList.exists()) {
				throw new GradleException("Missing master jre list: jre.master.txt")
			}
			if (inputDockerfiles.files.size() > 1) {
				throw new GradleException("Expected only 1 *$partialDockerfileExt file in $projectDir.name")
			}
			logger.lifecycle "JREs to use for $project.name containers: $jresToUse"
		}

		doLast {
			def jresFile = file("$resourcesOutputDir/${appServerShortName}.jre.txt")
			jresFile.getParentFile().mkdirs()
			jresFile.createNewFile()
			def tokenMap = [:] << additionalReplaceTokenMap
			jresToUse.each { jreVersion -> 
				tokenMap << [JRE: jreVersion]
				tokenMap << [AGENT_JAR_NAME: agentJarName]
				logger.debug "tokenMap = ${tokenMap}"
				copy {
					from projectDir
					into dockerfileOutputDir
					include "*$partialDockerfileExt"
					filter(ReplaceTokens, tokens: tokenMap)
					def sanitizedJreVersion = jreVersion.replace(':','_').replace('/','_')
					rename(/(.+\.)(partial)(\.dockerfile)/, "\$1$sanitizedJreVersion\$3")
				}
				jresFile << "$jreVersion\n"
			}
		}
	}

	task buildDockerImage {
		description 'Builds Docker images'

		dependsOn ':agent:assemble'
		dependsOn generateDockerfiles
		inputs.files(fileTree(dir: dockerfileOutputDir, include: '*.dockerfile'))

		outputs.upToDateWhen { false } // let docker determine if something needs to be built

		doFirst {
			if (!dockerExe) {
				throw new GradleException("Please set environment variable DOCKER_EXE to the absolute path of the docker executable")
			}
		}
		doLast {
			copy {
				from "$projectDir/resources/linux"
				into stagingDir
			}
			copy {
				from dockerfileOutputDir
				into stagingDir
			}
			copy {
				from globalResourcesDir
				into stagingDir
			}
			copy {
				from agentLibsDir
				into "$stagingDir/aiagent"
			}

			fileTree(dir:stagingDir, include: '*.dockerfile').each { df ->
				def tag = df.name.minus('.dockerfile').replace('.', '_')
				exec {
					workingDir df.getParentFile().absolutePath
					executable dockerExe
					args 'build', '-f', df.name, '-t', tag, '.'
				}
			}
		}
	}

	clean {
		delete outputRoot
	}
}

task buildDockerImage {
	dependsOn project.subprojects.collect { it.getTasksByName('buildDockerImage', false) }
	
	outputs.upToDateWhen { false }
	doFirst {
		// TODO should be configurable
		// switchDockerDaemon("linux")
	}

	doLast {
		project.subprojects.each { sp ->
			copy {
				from sp.ext.resourcesOutputDir
				into sharedResourcesDir
				include '**/*.*'
			}
		}
	}
}

// deprecated
task prune(type: Exec) {
	doFirst {
		logger.warn "This task (prune) is deprecated and will be removed in a future release."
	}
	executable dockerExe
	args 'container', 'prune', '-f'
}

def getConfigSet(File universeFile, File includesFile, File excludesFile) {
	if (!universeFile.exists()) {
		return [].toSet()
	}
	def hasIncludes = includesFile.exists()
	def hasExcludes = excludesFile.exists()
	if (hasIncludes) {
		logger.info "includes exist: $includesFile.absolutePath"
	}
	if (hasExcludes) {
		logger.info "excludes exist: $excludesFile.absolutePath"
	}
	def universalSet = universeFile.text.readLines().toSet()
	logger.info "universalSet has ${universalSet.size()} elements: $universalSet"
	
	def includeSet = (hasIncludes ? includesFile.text.readLines().toSet() : universalSet)
	logger.info "includeSet has ${includeSet.size()} elements: $includeSet"
	
	def excludeSet = (hasExcludes ? excludesFile.text.readLines() : []).toSet()
	logger.info "excludeSet has ${excludeSet.size()} elements: $excludeSet"

	// if the excludes file contains entries which do not exist in the master list, warn the user; this is likely a typo
	def uniqueExcludes = excludeSet.minus(universalSet)
	if (uniqueExcludes.size() > 0) {
		logger.info("$excludesFile.name entries are not a subset of ${universeFile.name}: ${uniqueExcludes}. These entries are nops and can be removed.")
	}
	
	// if the includes file contains entires which do not exist in the master list, warn the user; be aware that these will be included
	def uniqueIncludes = includeSet.minus(universalSet)
	if (uniqueIncludes.size() > 1) {
		logger.info("FYI: $includesFile.name has ${includeSubset.size()} entries not found in $universeFile.name: $includeSubset")
	}

	def resultantSet = includeSet.intersect(universalSet.minus(excludeSet)).plus(uniqueIncludes)
	return resultantSet
}

def findDockerExe() {
	if (!System.env.DOCKER_EXE) {
		logger.info 'DOCKER_EXE not set'
	}
	return System.env.DOCKER_EXE
}

def findDockerCliExe() {
	if (!System.env.DOCKER_CLI_EXE) {
		logger.info 'DOCKER_CLI_EXE not set'
	}
	return System.env.DOCKER_CLI_EXE
}

def verifyDockerInstallation() {
	exec {
		executable dockerExe
		args 'version'
	}
}

def getCurrentDockerServerArch() {
	verifyDockerInstallation()
	def dockerVersionOutput = new ByteArrayOutputStream()
	exec {
		executable dockerExe
		args 'version'
		standardOutput = dockerVersionOutput
		errorOutput = new ByteArrayOutputStream()
	}.assertNormalExitValue()
	String strOut = dockerVersionOutput.toString().trim()
	def m = strOut =~ /(?ism).+?Server:.+?OS\/Arch:\s+(\w+?)\//
	return m[0][1];
}

def switchDockerDaemon(targetMode = null) {
	verifyDockerInstallation()
	logger.lifecycle "Switching docker mode. Current mode = "+getCurrentDockerServerArch()
	if (targetMode != null) {
		assert targetMode == "linux" || targetMode == "windows"
		def currentMode = getCurrentDockerServerArch()
		if (targetMode == currentMode) {
			logger.lifecycle "Docker is already in $targetMode mode"
			return;
		}
	}
	exec {
		executable dockerCliExe
		args '-SwitchDaemon'
	}.assertNormalExitValue()
	logger.lifecycle "Mode switched. Current mode = "+getCurrentDockerServerArch()
}